generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  username  String? @unique
  password  String?
  firstName String?
  lastName  String?
  active    Boolean @default(true)

  authType        String  @default("CREDENTIALS")
  oauthProvider   String?
  oauthProviderId String?
  oauthProfile    String?

  image                String?
  lastLogin            DateTime?
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  refreshTokens RefreshToken[]
  roles         Role[]         @relation("UserRoles")
  searches      UserSearch[]

  @@unique([oauthProvider, oauthProviderId])
  @@index([email])
  @@index([username])
}

model RefreshToken {
  id               String   @id @default(cuid())
  token            String   @unique
  userId           String
  expiresAt        DateTime
  revoked          Boolean  @default(false)
  replacedByToken  String?
  family           String
  generationNumber Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  permissions Permission[]
  users       User[]       @relation("UserRoles")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
}

model Permission {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  roles       Role[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model UserSearch {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  searchType String // "FLIGHT", "HOTEL", etc.
  parameters String // JSON string of search parameters
  name       String? // Optional saved search name
  favorite   Boolean   @default(false)
  lastUsed   DateTime  @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@index([userId])
  @@index([searchType])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  tableName String
  recordId  String
  action    String // INSERT, UPDATE, DELETE
  oldData   String? // For updates, store previous state
  newData   String // Current state
  userId    String? // Optional: who made the change
  timestamp DateTime @default(now())
}

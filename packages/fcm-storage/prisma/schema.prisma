generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  username  String? @unique
  password  String?
  firstName String?
  lastName  String?
  active    Boolean @default(true)

  authType        String  @default("CREDENTIALS")
  oauthProvider   String?
  oauthProviderId String?
  oauthProfile    String?

  avatar                String?
  lastLogin            DateTime?
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  refreshTokens       RefreshToken[]
  roles               Role[]              @relation("UserRoles")
  searches            UserSearch[]
  flightOfferSearches FlightOfferSearch[]
  tasks               TaskSchedule[]

  @@unique([oauthProvider, oauthProviderId])
  @@index([email])
  @@index([username])
}

model RefreshToken {
  id               String   @id @default(cuid())
  token            String   @unique
  userId           String
  expiresAt        DateTime
  revoked          Boolean  @default(false)
  replacedByToken  String?
  family           String
  generationNumber Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  permissions Permission[]
  users       User[]       @relation("UserRoles")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
}

model Permission {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  roles       Role[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model UserSearch {
  id                  String              @id @default(cuid())
  userId              String
  user                User                @relation(fields: [userId], references: [id])
  searchType          String // "FLIGHT", "HOTEL", etc.
  parameters          String // JSON string of search parameters
  name                String? // Optional saved search name
  favorite            Boolean             @default(false)
  lastUsed            DateTime            @default(now())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  deletedAt           DateTime?
  flightOfferSearches FlightOfferSearch[]

  @@index([userId])
  @@index([searchType])
}

model TaskSchedule {
  id             String    @id @default(cuid())
  name           String
  description    String?
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  taskType       String   @default("")
  payload        String   @default("")
  state          String // "ENABLED" or "DISABLED"
  cronExpression String
  timeout        Int // milliseconds
  maxRetries     Int       @default(3)
  lastRunAt      DateTime?
  nextRunAt      DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  executions TaskExecution[]
  stats      TaskStats[]

  @@index([userId])
  @@index([state])
}

model TaskExecution {
  id        String       @id @default(cuid())
  taskId    String
  task      TaskSchedule @relation(fields: [taskId], references: [id])
  state     String // "PENDING", "RUNNING", "COMPLETED", "FAILED", "TIMEOUT", "SKIPPED"
  startTime DateTime
  endTime   DateTime?
  duration  Int? // milliseconds
  attempt   Int          @default(1)
  error     String? // JSON string of error details
  result    String? // JSON string of execution result

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([taskId])
  @@index([state])
  @@index([startTime])
}

model TaskStats {
  id                 String       @id @default(cuid())
  taskId             String
  task               TaskSchedule @relation(fields: [taskId], references: [id])
  totalRuns          Int          @default(0)
  successfulRuns     Int          @default(0)
  failedRuns         Int          @default(0)
  averageDuration    Float        @default(0)
  lastExecutionState String
  lastError          String?
  periodStart        DateTime
  periodEnd          DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([taskId])
  @@index([periodStart])
  @@index([periodEnd])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  tableName String
  recordId  String
  action    String // INSERT, UPDATE, DELETE
  oldData   String? // For updates, store previous state
  newData   String // Current state
  userId    String? // Optional: who made the change
  timestamp DateTime @default(now())
}

model FlightOfferSearch {
  id            String              @id @default(cuid())
  userId        String
  user          User                @relation(fields: [userId], references: [id])
  searchType    String // "SIMPLE" or "ADVANCED"
  parameters    String // JSON string of search parameters
  savedSearchId String? // Optional reference to UserSearch if this was from a saved search
  userSearch    UserSearch?         @relation(fields: [savedSearchId], references: [id])
  status        String // "COMPLETED", "FAILED", "PARTIAL"
  totalResults  Int
  results       FlightOfferResult[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
  @@index([searchType])
}

model FlightOfferResult {
  id                String            @id @default(cuid())
  searchId          String
  search            FlightOfferSearch @relation(fields: [searchId], references: [id])
  offerId           String // Amadeus offer ID
  price             Decimal
  validatingCarrier String
  segments          String // JSON array of flight segments

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([searchId])
  @@index([offerId])
}
